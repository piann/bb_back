// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  reasonOfLock: (where?: ReasonOfLockWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  reasonOfLock: (
    where: ReasonOfLockWhereUniqueInput
  ) => ReasonOfLockNullablePromise;
  reasonOfLocks: (args?: {
    where?: ReasonOfLockWhereInput;
    orderBy?: ReasonOfLockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ReasonOfLock>;
  reasonOfLocksConnection: (args?: {
    where?: ReasonOfLockWhereInput;
    orderBy?: ReasonOfLockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReasonOfLockConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createReasonOfLock: (data: ReasonOfLockCreateInput) => ReasonOfLockPromise;
  updateReasonOfLock: (args: {
    data: ReasonOfLockUpdateInput;
    where: ReasonOfLockWhereUniqueInput;
  }) => ReasonOfLockPromise;
  updateManyReasonOfLocks: (args: {
    data: ReasonOfLockUpdateManyMutationInput;
    where?: ReasonOfLockWhereInput;
  }) => BatchPayloadPromise;
  upsertReasonOfLock: (args: {
    where: ReasonOfLockWhereUniqueInput;
    create: ReasonOfLockCreateInput;
    update: ReasonOfLockUpdateInput;
  }) => ReasonOfLockPromise;
  deleteReasonOfLock: (
    where: ReasonOfLockWhereUniqueInput
  ) => ReasonOfLockPromise;
  deleteManyReasonOfLocks: (
    where?: ReasonOfLockWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  reasonOfLock: (
    where?: ReasonOfLockSubscriptionWhereInput
  ) => ReasonOfLockSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ReasonOfLockOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "note_ASC"
  | "note_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "passwordHash_ASC"
  | "passwordHash_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "isLocked_ASC"
  | "isLocked_DESC"
  | "numberOfLoginTrial_ASC"
  | "numberOfLoginTrial_DESC"
  | "note_ASC"
  | "note_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ReasonOfLockWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  value?: Maybe<String>;
}>;

export interface ReasonOfLockWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  note?: Maybe<String>;
  note_not?: Maybe<String>;
  note_in?: Maybe<String[] | String>;
  note_not_in?: Maybe<String[] | String>;
  note_lt?: Maybe<String>;
  note_lte?: Maybe<String>;
  note_gt?: Maybe<String>;
  note_gte?: Maybe<String>;
  note_contains?: Maybe<String>;
  note_not_contains?: Maybe<String>;
  note_starts_with?: Maybe<String>;
  note_not_starts_with?: Maybe<String>;
  note_ends_with?: Maybe<String>;
  note_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReasonOfLockWhereInput[] | ReasonOfLockWhereInput>;
  OR?: Maybe<ReasonOfLockWhereInput[] | ReasonOfLockWhereInput>;
  NOT?: Maybe<ReasonOfLockWhereInput[] | ReasonOfLockWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  passwordHash?: Maybe<String>;
  passwordHash_not?: Maybe<String>;
  passwordHash_in?: Maybe<String[] | String>;
  passwordHash_not_in?: Maybe<String[] | String>;
  passwordHash_lt?: Maybe<String>;
  passwordHash_lte?: Maybe<String>;
  passwordHash_gt?: Maybe<String>;
  passwordHash_gte?: Maybe<String>;
  passwordHash_contains?: Maybe<String>;
  passwordHash_not_contains?: Maybe<String>;
  passwordHash_starts_with?: Maybe<String>;
  passwordHash_not_starts_with?: Maybe<String>;
  passwordHash_ends_with?: Maybe<String>;
  passwordHash_not_ends_with?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  isLocked_not?: Maybe<Boolean>;
  reasonOfLock?: Maybe<ReasonOfLockWhereInput>;
  numberOfLoginTrial?: Maybe<Int>;
  numberOfLoginTrial_not?: Maybe<Int>;
  numberOfLoginTrial_in?: Maybe<Int[] | Int>;
  numberOfLoginTrial_not_in?: Maybe<Int[] | Int>;
  numberOfLoginTrial_lt?: Maybe<Int>;
  numberOfLoginTrial_lte?: Maybe<Int>;
  numberOfLoginTrial_gt?: Maybe<Int>;
  numberOfLoginTrial_gte?: Maybe<Int>;
  note?: Maybe<String>;
  note_not?: Maybe<String>;
  note_in?: Maybe<String[] | String>;
  note_not_in?: Maybe<String[] | String>;
  note_lt?: Maybe<String>;
  note_lte?: Maybe<String>;
  note_gt?: Maybe<String>;
  note_gte?: Maybe<String>;
  note_contains?: Maybe<String>;
  note_not_contains?: Maybe<String>;
  note_starts_with?: Maybe<String>;
  note_not_starts_with?: Maybe<String>;
  note_ends_with?: Maybe<String>;
  note_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ReasonOfLockCreateInput {
  id?: Maybe<ID_Input>;
  value: String;
  note?: Maybe<String>;
}

export interface ReasonOfLockUpdateInput {
  value?: Maybe<String>;
  note?: Maybe<String>;
}

export interface ReasonOfLockUpdateManyMutationInput {
  value?: Maybe<String>;
  note?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  passwordHash: String;
  phoneNumber?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  reasonOfLock?: Maybe<ReasonOfLockCreateOneInput>;
  numberOfLoginTrial?: Maybe<Int>;
  note?: Maybe<String>;
}

export interface ReasonOfLockCreateOneInput {
  create?: Maybe<ReasonOfLockCreateInput>;
  connect?: Maybe<ReasonOfLockWhereUniqueInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  passwordHash?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  reasonOfLock?: Maybe<ReasonOfLockUpdateOneInput>;
  numberOfLoginTrial?: Maybe<Int>;
  note?: Maybe<String>;
}

export interface ReasonOfLockUpdateOneInput {
  create?: Maybe<ReasonOfLockCreateInput>;
  update?: Maybe<ReasonOfLockUpdateDataInput>;
  upsert?: Maybe<ReasonOfLockUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ReasonOfLockWhereUniqueInput>;
}

export interface ReasonOfLockUpdateDataInput {
  value?: Maybe<String>;
  note?: Maybe<String>;
}

export interface ReasonOfLockUpsertNestedInput {
  update: ReasonOfLockUpdateDataInput;
  create: ReasonOfLockCreateInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  passwordHash?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  numberOfLoginTrial?: Maybe<Int>;
  note?: Maybe<String>;
}

export interface ReasonOfLockSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReasonOfLockWhereInput>;
  AND?: Maybe<
    ReasonOfLockSubscriptionWhereInput[] | ReasonOfLockSubscriptionWhereInput
  >;
  OR?: Maybe<
    ReasonOfLockSubscriptionWhereInput[] | ReasonOfLockSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ReasonOfLockSubscriptionWhereInput[] | ReasonOfLockSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ReasonOfLock {
  id: ID_Output;
  value: String;
  note?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReasonOfLockPromise
  extends Promise<ReasonOfLock>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  note: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReasonOfLockSubscription
  extends Promise<AsyncIterator<ReasonOfLock>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReasonOfLockNullablePromise
  extends Promise<ReasonOfLock | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  note: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReasonOfLockConnection {
  pageInfo: PageInfo;
  edges: ReasonOfLockEdge[];
}

export interface ReasonOfLockConnectionPromise
  extends Promise<ReasonOfLockConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReasonOfLockEdge>>() => T;
  aggregate: <T = AggregateReasonOfLockPromise>() => T;
}

export interface ReasonOfLockConnectionSubscription
  extends Promise<AsyncIterator<ReasonOfLockConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReasonOfLockEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReasonOfLockSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ReasonOfLockEdge {
  node: ReasonOfLock;
  cursor: String;
}

export interface ReasonOfLockEdgePromise
  extends Promise<ReasonOfLockEdge>,
    Fragmentable {
  node: <T = ReasonOfLockPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReasonOfLockEdgeSubscription
  extends Promise<AsyncIterator<ReasonOfLockEdge>>,
    Fragmentable {
  node: <T = ReasonOfLockSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReasonOfLock {
  count: Int;
}

export interface AggregateReasonOfLockPromise
  extends Promise<AggregateReasonOfLock>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReasonOfLockSubscription
  extends Promise<AsyncIterator<AggregateReasonOfLock>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  passwordHash: String;
  phoneNumber?: String;
  isLocked: Boolean;
  numberOfLoginTrial: Int;
  note?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  passwordHash: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  isLocked: () => Promise<Boolean>;
  reasonOfLock: <T = ReasonOfLockPromise>() => T;
  numberOfLoginTrial: () => Promise<Int>;
  note: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  isLocked: () => Promise<AsyncIterator<Boolean>>;
  reasonOfLock: <T = ReasonOfLockSubscription>() => T;
  numberOfLoginTrial: () => Promise<AsyncIterator<Int>>;
  note: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  passwordHash: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  isLocked: () => Promise<Boolean>;
  reasonOfLock: <T = ReasonOfLockPromise>() => T;
  numberOfLoginTrial: () => Promise<Int>;
  note: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ReasonOfLockSubscriptionPayload {
  mutation: MutationType;
  node: ReasonOfLock;
  updatedFields: String[];
  previousValues: ReasonOfLockPreviousValues;
}

export interface ReasonOfLockSubscriptionPayloadPromise
  extends Promise<ReasonOfLockSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReasonOfLockPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReasonOfLockPreviousValuesPromise>() => T;
}

export interface ReasonOfLockSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReasonOfLockSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReasonOfLockSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReasonOfLockPreviousValuesSubscription>() => T;
}

export interface ReasonOfLockPreviousValues {
  id: ID_Output;
  value: String;
  note?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReasonOfLockPreviousValuesPromise
  extends Promise<ReasonOfLockPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  note: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReasonOfLockPreviousValuesSubscription
  extends Promise<AsyncIterator<ReasonOfLockPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  passwordHash: String;
  phoneNumber?: String;
  isLocked: Boolean;
  numberOfLoginTrial: Int;
  note?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  passwordHash: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  isLocked: () => Promise<Boolean>;
  numberOfLoginTrial: () => Promise<Int>;
  note: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  isLocked: () => Promise<AsyncIterator<Boolean>>;
  numberOfLoginTrial: () => Promise<AsyncIterator<Int>>;
  note: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "ReasonOfLock",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
