module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateReasonOfLock {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createReasonOfLock(data: ReasonOfLockCreateInput!): ReasonOfLock!
  updateReasonOfLock(data: ReasonOfLockUpdateInput!, where: ReasonOfLockWhereUniqueInput!): ReasonOfLock
  updateManyReasonOfLocks(data: ReasonOfLockUpdateManyMutationInput!, where: ReasonOfLockWhereInput): BatchPayload!
  upsertReasonOfLock(where: ReasonOfLockWhereUniqueInput!, create: ReasonOfLockCreateInput!, update: ReasonOfLockUpdateInput!): ReasonOfLock!
  deleteReasonOfLock(where: ReasonOfLockWhereUniqueInput!): ReasonOfLock
  deleteManyReasonOfLocks(where: ReasonOfLockWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  reasonOfLock(where: ReasonOfLockWhereUniqueInput!): ReasonOfLock
  reasonOfLocks(where: ReasonOfLockWhereInput, orderBy: ReasonOfLockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReasonOfLock]!
  reasonOfLocksConnection(where: ReasonOfLockWhereInput, orderBy: ReasonOfLockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReasonOfLockConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type ReasonOfLock {
  id: ID!
  value: String!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReasonOfLockConnection {
  pageInfo: PageInfo!
  edges: [ReasonOfLockEdge]!
  aggregate: AggregateReasonOfLock!
}

input ReasonOfLockCreateInput {
  id: ID
  value: String!
  note: String
}

input ReasonOfLockCreateOneInput {
  create: ReasonOfLockCreateInput
  connect: ReasonOfLockWhereUniqueInput
}

type ReasonOfLockEdge {
  node: ReasonOfLock!
  cursor: String!
}

enum ReasonOfLockOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReasonOfLockPreviousValues {
  id: ID!
  value: String!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReasonOfLockSubscriptionPayload {
  mutation: MutationType!
  node: ReasonOfLock
  updatedFields: [String!]
  previousValues: ReasonOfLockPreviousValues
}

input ReasonOfLockSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReasonOfLockWhereInput
  AND: [ReasonOfLockSubscriptionWhereInput!]
  OR: [ReasonOfLockSubscriptionWhereInput!]
  NOT: [ReasonOfLockSubscriptionWhereInput!]
}

input ReasonOfLockUpdateDataInput {
  value: String
  note: String
}

input ReasonOfLockUpdateInput {
  value: String
  note: String
}

input ReasonOfLockUpdateManyMutationInput {
  value: String
  note: String
}

input ReasonOfLockUpdateOneInput {
  create: ReasonOfLockCreateInput
  update: ReasonOfLockUpdateDataInput
  upsert: ReasonOfLockUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ReasonOfLockWhereUniqueInput
}

input ReasonOfLockUpsertNestedInput {
  update: ReasonOfLockUpdateDataInput!
  create: ReasonOfLockCreateInput!
}

input ReasonOfLockWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ReasonOfLockWhereInput!]
  OR: [ReasonOfLockWhereInput!]
  NOT: [ReasonOfLockWhereInput!]
}

input ReasonOfLockWhereUniqueInput {
  id: ID
  value: String
}

type Subscription {
  reasonOfLock(where: ReasonOfLockSubscriptionWhereInput): ReasonOfLockSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  passwordHash: String!
  phoneNumber: String
  isLocked: Boolean!
  reasonOfLock: ReasonOfLock
  numberOfLoginTrial: Int!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  passwordHash: String!
  phoneNumber: String
  isLocked: Boolean
  reasonOfLock: ReasonOfLockCreateOneInput
  numberOfLoginTrial: Int
  note: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  passwordHash_ASC
  passwordHash_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  isLocked_ASC
  isLocked_DESC
  numberOfLoginTrial_ASC
  numberOfLoginTrial_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  passwordHash: String!
  phoneNumber: String
  isLocked: Boolean!
  numberOfLoginTrial: Int!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  passwordHash: String
  phoneNumber: String
  isLocked: Boolean
  reasonOfLock: ReasonOfLockUpdateOneInput
  numberOfLoginTrial: Int
  note: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  passwordHash: String
  phoneNumber: String
  isLocked: Boolean
  numberOfLoginTrial: Int
  note: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  passwordHash: String
  passwordHash_not: String
  passwordHash_in: [String!]
  passwordHash_not_in: [String!]
  passwordHash_lt: String
  passwordHash_lte: String
  passwordHash_gt: String
  passwordHash_gte: String
  passwordHash_contains: String
  passwordHash_not_contains: String
  passwordHash_starts_with: String
  passwordHash_not_starts_with: String
  passwordHash_ends_with: String
  passwordHash_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  isLocked: Boolean
  isLocked_not: Boolean
  reasonOfLock: ReasonOfLockWhereInput
  numberOfLoginTrial: Int
  numberOfLoginTrial_not: Int
  numberOfLoginTrial_in: [Int!]
  numberOfLoginTrial_not_in: [Int!]
  numberOfLoginTrial_lt: Int
  numberOfLoginTrial_lte: Int
  numberOfLoginTrial_gt: Int
  numberOfLoginTrial_gte: Int
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    