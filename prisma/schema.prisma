datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

enum Role {
  HACKER
  BUSINESS
  ADMIN
}

enum ReasonOfLock {
  NEW_ACCOUNT
  TOO_MANY_TRIAL
}

enum TargetType {
  WEB
  IOS
  ANDROID
  WINDOWS
  LINUX
}

enum ResultCode {
  UNABLE_TO_JUDGE
  DUPLICATED
  NOT_VULNERABILITY
  NOT_TARGET_BOUNTY
  TARGET_BOUNTY
}

enum FileCategory {
  REPORT
  IMAGE
  OTHERS
}

model User {
  id                            String                   @id @default(cuid())
  realName                      String?
  nickName                      String                   @unique
  email                         String                   @unique
  passwordHash                  String
  phoneNumber                   String?
  isPhoneVerified               Boolean                  @default(false)
  phoneVerificationSecret       String?
  numberOfPhoneVerificationFail Int                      @default(value: 0)
  introduction                  String?
  isLocked                      Boolean                  @default(true)
  reasonOfLock                  ReasonOfLock?
  numberOfLoginFail             Int                      @default(value: 0)
  profilePicture                FileObj?                 @relation(name: "profilePictureRelation", fields: [picId], references: [id])
  picId                         String?
  note                          String?
  role                          Role
  authSecret                    String?
  passwordResetSecret           String?
  hackerInfo                    HackerInfo?
  businessInfo                  BusinessInfo?
  createdAt                     DateTime                 @default(now())
  updatedAt                     DateTime                 @default(now()) @updatedAt
  // foreigner key
  owningFileList                FileObj[]                @relation(references: [id])
  reportList                    Report[]
  PrivateProgramConnUser        PrivateProgramConnUser[]
  FileObj                       FileObj[]                @relation("uploadUserRelation")
  CollaboratorInfo              CollaboratorInfo[]
  ReportComment                 ReportComment[]
}

model HackerInfo {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  credit      Int      @default(value: 0)
  totalBounty Int      @default(value: 0)
  trustLevel  Float    @default(value: 0)
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model BusinessInfo {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Company {
  id               String             @id @default(cuid())
  companyName      String             @unique
  nameId           String             @unique // only lower case
  description      String?
  webPageUrl       String?
  logo             FileObj?           @relation(fields: [logoId], references: [id])
  logoId           String?
  note             String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  BusinessInfo     BusinessInfo[]
  BugBountyProgram BugBountyProgram[]
}

model BugBountyProgram {
  id                                  String                                @id @default(cuid())
  ownerCompany                        Company                               @relation(fields: [ownerCompanyId], references: [id])
  ownerCompanyId                      String
  isPrivate                           Boolean
  disclosurePolicy                    String                                @default(value: "disclosure policy")
  isOpen                              Boolean                               @default(value: false)
  openDate                            DateTime?
  closeDate                           DateTime?
  lowPriceMin                         Int                                   @default(value: 0)
  lowPriceMax                         Int                                   @default(value: 0)
  mediumPriceMin                      Int                                   @default(value: 0)
  mediumPriceMax                      Int                                   @default(value: 0)
  highPriceMin                        Int                                   @default(value: 0)
  highriceMax                         Int                                   @default(value: 0)
  fatalPriceMin                       Int                                   @default(value: 0)
  fatalPriceMax                       Int                                   @default(value: 0)
  introduction                        String                                @default(value: "introduction")
  inScopeList                         InScopeTarget[]
  outOfScopeList                      OutOfScopeTarget[]
  requiredTrustLevel                  Float                                 @default(value: 0)
  createdAt                           DateTime                              @default(now())
  updatedAt                           DateTime                              @default(now()) @updatedAt
  reportList                          Report[]
  managedBy                           String? // self, zerowhale
  PrivateProgramConnUser              PrivateProgramConnUser[]
  ProgramRuleConnBugBountyProgram     ProgramRuleConnBugBountyProgram[]
  BountyExclusionConnBugBountyProgram BountyExclusionConnBugBountyProgram[]
  ReportTipConnBugBountyProgram       ReportTipConnBugBountyProgram[]
  RegulationConnBugBountyProgram      RegulationConnBugBountyProgram[]
}

model PrivateProgramConnUser {
  id               String           @id @default(cuid())
  permittedUser    User             @relation(fields: [uId], references: [id])
  uId              String
  bugBountyProgram BugBountyProgram @relation(fields: [bId], references: [id])
  bId              String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
}

model ProgramRule {
  id                              Int                               @id @default(autoincrement())
  value                           String
  note                            String?
  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @default(now()) @updatedAt
  ProgramRuleConnBugBountyProgram ProgramRuleConnBugBountyProgram[]
}

model ProgramRuleConnBugBountyProgram {
  id               String           @id @default(cuid())
  programRule      ProgramRule      @relation(fields: [pId], references: [id])
  pId              Int
  bugBountyProgram BugBountyProgram @relation(fields: [bId], references: [id])
  bId              String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
}

model InScopeTarget {
  id               Int              @id @default(autoincrement())
  type             TargetType
  value            String
  bugBountyProgram BugBountyProgram @relation(fields: [programId], references: [id])
  programId        String
  note             String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  reports          Report[]         @relation(references: [id])
}

model OutOfScopeTarget {
  id               Int              @id @default(autoincrement())
  type             TargetType
  value            String
  bugBountyProgram BugBountyProgram @relation(fields: [programId], references: [id])
  programId        String
  note             String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
}

model BountyExclusion {
  id                                  Int                                   @id @default(autoincrement())
  value                               String
  note                                String?
  createdAt                           DateTime                              @default(now())
  updatedAt                           DateTime                              @default(now()) @updatedAt
  BountyExclusionConnBugBountyProgram BountyExclusionConnBugBountyProgram[]
}

model BountyExclusionConnBugBountyProgram {
  id               String           @id @default(cuid())
  bountyExclusion  BountyExclusion  @relation(fields: [eId], references: [id])
  eId              Int
  bugBountyProgram BugBountyProgram @relation(fields: [bId], references: [id])
  bId              String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
}

model ReportTip {
  id                            Int                             @id @default(autoincrement())
  value                         String
  note                          String?
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @default(now()) @updatedAt
  ReportTipConnBugBountyProgram ReportTipConnBugBountyProgram[]
}

model ReportTipConnBugBountyProgram {
  id               String           @id @default(cuid())
  reportTip        ReportTip        @relation(fields: [rId], references: [id])
  rId              Int
  bugBountyProgram BugBountyProgram @relation(fields: [bId], references: [id])
  bId              String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
}

model Regulation {
  id                             Int                              @id @default(autoincrement())
  value                          String
  note                           String?
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @default(now()) @updatedAt
  RegulationConnBugBountyProgram RegulationConnBugBountyProgram[]
}

model RegulationConnBugBountyProgram {
  id               String           @id @default(cuid())
  regulation       Regulation       @relation(fields: [rId], references: [id])
  rId              Int
  bugBountyProgram BugBountyProgram @relation(fields: [bId], references: [id])
  bId              String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
}

model FileObj {
  id                String          @id @default(cuid())
  isPublic          Boolean
  permittedUserList User[]          @relation(references: [id])
  uploadUser        User            @relation(fields: [uploadUserId], references: [id], name: "uploadUserRelation")
  uploadUserId      String
  fileName          String
  fileType          String?
  category          FileCategory?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  User              User[]          @relation("profilePictureRelation")
  Company           Company[]
  Report            Report[]
  ReportComment     ReportComment[]
}

model Report {
  id               String             @id @default(cuid())
  bugBountyProgram BugBountyProgram   @relation(fields: [bbpId], references: [id])
  bbpId            String
  author           User               @relation(fields: [authorId], references: [id])
  authorId         String
  vulnerability    Vulnerability      @relation(fields: [vulId], references: [id])
  vulId            Int
  target           InScopeTarget[]    @relation(references: [id])
  // for impact scoring
  attackComplexity Int?
  requiredPriv     Int?
  userInteraction  Int?
  confidentiality  Int?
  integrity        Int?
  availablity      Int?
  // report content
  title            String?
  location         String?
  enviroment       String?
  description      String
  dump             String?
  additionalText   String?
  reportFile       FileObj?           @relation(fields: [fileId], references: [id])
  fileId           String?
  progressStatus   ProgressStatus[]
  result           ReportResult[]
  bountyAmount     Int                @default(value: 0)
  grantedCredit    Int                @default(value: 0)
  vulLevel         Int? //1,2,3,4
  cvssScore        Float?
  writingScore     Float?
  evaluationText   String?
  commentList      ReportComment[]
  note             String?
  isDisclosed      Boolean?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  //
  CollaboratorInfo CollaboratorInfo[]
}

model CollaboratorInfo {
  id                Int      @id @default(autoincrement())
  report            Report   @relation(fields: [rId], references: [id])
  rId               String
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  contributionRatio Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}

model Vulnerability {
  id        Int      @id @default(autoincrement())
  category  String
  name      String
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Report    Report[]
}

model ProgressStatus {
  id          String   @id @default(cuid())
  progressIdx Int      @default(value: 0)
  report      Report   @relation(fields: [reportId], references: [id])
  reportId    String
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model ReportResult {
  id         String     @id @default(cuid())
  resultCode ResultCode
  report     Report     @relation(fields: [reportId], references: [id])
  reportId   String
  note       String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
}

model ReportComment {
  id        String   @id @default(cuid())
  content   String
  writer    User     @relation(fields: [writerId], references: [id])
  writerId  String
  report    Report   @relation(fields: [reportId], references: [id])
  reportId  String
  file      FileObj? @relation(fields: [fileId], references: [id])
  fileId    String?
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
