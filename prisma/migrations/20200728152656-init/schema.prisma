// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native","linux-musl"]
}

enum Role{
  HACKER
  BUSINESS
  ADMIN
}

enum ReasonOfLock{
  NEW_ACCOUNT
  TOO_MANY_TRIAL
}

enum TargetType{
  WEB
  IOS
  ANDROID
}

enum ResultCode{
  UNABLE_TO_JUDGE
  DUPLICATED
  NOT_VULNERABILITY

}

model User{
    id String @id @default(cuid())
    firstName String
    lastName String
    email String @unique
    passwordHash String
    phoneNumber String?
    isLocked Boolean @default(true)
    reasonOfLock ReasonOfLock?
    numberOfLoginFail Int @default(value:0)    
    note String?
    role Role
    hackerInfo HackerInfo?
    businessInfo BusinessInfo?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    // foreigner key
    owningFileList FileObj[] @relation(references: [id])
    
}

model HackerInfo{
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  credit Int @default(value:0)
  totalBounty Int @default(value:0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model BusinessInfo{
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  companyName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model BugBountyProgram{
  id String @id @default(cuid())
  lowPriceMin Int
  lowPriceMax Int
  mediumPriceMin Int
  mediumriceMax Int
  highPriceMin Int
  highriceMax Int
  fatalPriceMin Int
  fatalPriceMax Int
  introduction String
  programRuleList ProgramRule[] @relation(references:[id])
  inScopeList InScopeTarget[]
  outOfScopeList OutOfScopeTarget[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ProgramRule{
  id Int @id @default(autoincrement())
  value String
  bugBountyProgramList BugBountyProgram[] @relation(references:[id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model InScopeTarget{
  id Int @id @default(autoincrement())
  type TargetType
  value String
  bugBountyProgram BugBountyProgram @relation(fields: [programId], references: [id])
  programId String
  note String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model OutOfScopeTarget{
  id Int @id @default(autoincrement())
  type TargetType
  value String
  bugBountyProgram BugBountyProgram @relation(fields: [programId], references: [id])
  programId String
  note String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model BountyExclusion{
  id Int @id @default(autoincrement())
  type TargetType
  value String
  bugBountyProgram BugBountyProgram @relation(fields: [programId], references: [id])
  programId String
  note String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ReportTip{
  id Int @id @default(autoincrement())
  value String
  note String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Report{
  id String @id @default(cuid())
  vulnerability Vulnerability @relation(fields: [vulId], references:[id])
  vulId Int
  // for impact scoring
  attackComplexity Int?
  requiredPriv Int?
  userInteraction Int?
  confidentiality Int?
  integrity Int?
  availablity Int?
  // report content
  title String?
  location String?
  enviroment String?
  description String
  dump String?
  additionalText String?
  //progressStatus
  //resultCode 
  evaluationText String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Vulnerability{
  id Int @id @default(autoincrement())
  category String
  name String
  note String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model FileObj{
  id String @id @default(cuid())
  isPublic Boolean
  permittedUserList User[] @relation(references: [id])
  fileName String
  mimetype String?
  rawData String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ProgressThread{
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}
